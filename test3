using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading.Tasks.Dataflow;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

class Program
{
    static async Task Main(string[] args)
    {
        // Load configuration settings
        var configuration = new ConfigurationBuilder()
            .AddJsonFile("appsettings.json")
            .Build();

        int batchSize = configuration.GetValue<int>("BatchSize");
        int maxDegreeOfParallelism = configuration.GetValue<int>("MaxDegreeOfParallelism");

        // Initialize logger
        using var loggerFactory = LoggerFactory.Create(builder =>
        {
            builder.AddConsole();
        });
        var logger = loggerFactory.CreateLogger<Program>();

        // BufferBlock to buffer incoming trades
        var bufferBlock = new BufferBlock<Trade>();

        // BatchBlock to batch trades into groups of batchSize
        var batchBlock = new BatchBlock<Trade>(batchSize);

        // ActionBlock to process each batch of trades with parallelism
        var actionBlock = new ActionBlock<Trade[]>(async trades =>
        {
            try
            {
                // Save trades to the database
                await SaveTradesToDatabase(trades, logger);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error saving trades to the database.");
                // Implement retry logic or other error handling as needed
            }
        }, new ExecutionDataflowBlockOptions
        {
            MaxDegreeOfParallelism = maxDegreeOfParallelism
        });

        // Link the BufferBlock to the BatchBlock
        bufferBlock.LinkTo(batchBlock, new DataflowLinkOptions { PropagateCompletion = true });

        // Link the BatchBlock to the ActionBlock
        batchBlock.LinkTo(actionBlock, new DataflowLinkOptions { PropagateCompletion = true });

        // Post trades to the BufferBlock
        for (int i = 0; i < 500000; i++)
        {
            bufferBlock.Post(new Trade { Id = i, Value = $"Trade {i}" });
        }

        // Signal completion to the BufferBlock
        bufferBlock.Complete();

        // Await completion of the ActionBlock to ensure all trades are processed
        await actionBlock.Completion;
    }

    // Method to simulate saving trades to the database
    static async Task SaveTradesToDatabase(Trade[] trades, ILogger logger)
    {
        // Log the number of trades being saved
        logger.LogInformation($"Saving batch of {trades.Length} trades to the database.");
        // Simulate async database save operation
        await Task.Delay(100); // Replace with actual database save logic
    }
}

// Trade class to represent a trade item
class Trade
{
    public int Id { get; set; }
    public string Value { get; set; }
}
